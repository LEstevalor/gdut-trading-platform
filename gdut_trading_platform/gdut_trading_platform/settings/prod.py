# 发布环境的配置文件
# 生产环境的配置文件

"""
Django settings for gdut_trading_platform project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import sys
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent
# print(BASE_DIR)
# D:\python_environment\python.exercise\DRF_project\gdut-trading-platform\gdut_trading_platform\gdut_trading_platform

# ① 为便于INSTALLED_APPS路径载入；②修改Django认证模型类需“应用名.模型名”  追加搜包路径
# print(sys.path)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# sys.path.insert(0, BASE_DIR + '/apps')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(*r*nj-=7s2w3_%+e2@-b%ah36z5h*i&*fheuk!uvb6ra0-8c='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# 允许哪些域名访问Django（'www.gdut-trading-platform.site'  # 动态接口）
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'www.gdut-trading-platform.site', 'api.gdut-trading-platform.site',
                 'www.gdut-trading-platform.site']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',       # DRF
    'corsheaders',          # 解决跨域CORS
    'ckeditor',             # 富文本编辑器
    'ckeditor_uploader',    # 富文本编辑器上传图片模块
    'django_crontab',       # 定时任务

    'users.apps.UsersConfig',      # 用户模块
    'areas.apps.AreasConfig',      # 省市区模块
    'goods.apps.GoodsConfig',      # 商品模块
    'contents.apps.ContentsConfig',  # 内容模块
    'carts.apps.CartsConfig',      # 购物车模块
    'orders.apps.OrdersConfig',      # 订单模块
    'payment.apps.PaymentConfig',    # 支付模块

    'rest_framework_simplejwt',  # (simple)jwt
    'haystack',  # Haystack对接Elasticsearch

    'xadmin',  # Xadmin
    'crispy_forms',
    'reversion',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',       # 最外层的中间件
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gdut_trading_platform.urls'

# 模板文件配置项
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],   # 指定模板文件加载路径
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gdut_trading_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'gdut_trading_platform',  # 数据库名字
        'USER': 'root',         # 如果有账户的情况下，把root改成对应的账户名即可
        'PASSWORD': '2534891955!',
        'HOST': '127.0.0.1',    # 那台机器安装了MySQL
        'PORT': 3306,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 配置redis数据库作为缓存后端
CACHES = {
    # 默认缓存配置
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 缓存验证码
    "verify_codes": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 缓存用户浏览历史记录
    "history": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 购物车
    "cart": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# 日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/gdut_trading_platform.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    },
}

# DRF配置项
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'gdut_trading_platform.utils.exceptions.exception_handler',

    'DEFAULT_AUTHENTICATION_CLASSES': (
        # jwt配置
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ),

    # 分页
    'DEFAULT_PAGINATION_CLASS': 'gdut_trading_platform.utils.pagination.StandardResultsSetPagination',
}

# 修改Django认证系统的用户模型类
# String model references must be of the form 'app_label.ModelName'.这里的报错说必须要写 应用名.模型名
# AUTH_USER_MODEL = 'gdut_trading_platform.apps.users.models.User'
AUTH_USER_MODEL = 'users.User'     # 导包路径里需要到apps才能识别出来
# （这里跳过models，底层会直接走到users.models.User，因为django已经约束死了models文件写模型）

# CORS追加白名单（显然针对的是前端域名）
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://localhost:8080',
    'http://www.gdut-trading-platform.site:8080',
    'http://api.gdut-trading-platform.site:8000',
    'http://www.gdut-trading-platform.site',  # 动态接口
)
# 允许携带cookie
CORS_ALLOW_CREDENTIALS = True  # 指明在跨域访问中，后端是否支持对cookie的操作

# Simple JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),  # JWT有效期
}

# 修改默认的认证后端
AUTHENTICATION_BACKENDS = [
 'users.auth.MyAuthBackend',
]

# 发送邮箱配置(注释掉的配置为全局已经有的默认配置)
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_PORT = 25
EMAIL_HOST = 'smtp.163.com'   # 邮箱服务器
# 发送邮件的邮箱
EMAIL_HOST_USER = 'lxd2534891955@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'MQFAOXAEQJTEALXO'
# 收件⼈看到的发件⼈
EMAIL_FROM = 'python<lxd2534891955@163.com>'

# DRF扩展
REST_FRAMEWORK_EXTENSIONS = {
 # 缓存时间
 'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60,
}

# django⽂件存储
DEFAULT_FILE_STORAGE = 'gdut_trading_platform.utils.fastdfs.fdfs_storage.FastDFSStorage'
# FastDFS
FDFS_BASE_URL = 'http://192.168.239.100:8888/'
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs/client.conf')

# 富文本编辑器ckeditor配置
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',  # 工具条功能
        'height': 300,   # 编辑器高度
        # 'width': 300,  # 编辑器宽
    },
}
CKEDITOR_UPLOAD_PATH = ''  # 上传图片保存路径，使用了FastDFS，所以此处设为''

# 生成的静态html文件保存目录（dirname表示上一級）
GENERATED_STATIC_HTML_FILES_DIR = os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), 'front_end_pc')

# 支付宝信息
ALIPAY_APPID = "2021000122605799"  # 沙箱给的默认APP id
ALIPAY_DEBUG = True  # 是否使用沙箱环境
ALIPAY_URL = "https://openapi.alipaydev.com/gateway.do"  # 支付宝网关地址

# Haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://192.168.239.100:9200/',  # 此处为elasticsearch运行的服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'gdut',  # 指定elasticsearch建立的索引库的名称
    },
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 配置读写分离
DATABASE_ROUTERS = ['gdut_trading_platform.utils.db_router.MasterSlaveDBRouter']
